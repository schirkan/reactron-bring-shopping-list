{"version":3,"file":"bundle.server.js","sources":["../src/server/services/BringService.ts","../src/server/index.ts"],"sourcesContent":["import { IReactronServiceContext } from '@schirkan/reactron-interfaces';\r\nimport * as request from 'request-promise-native';\r\nimport { IBringService } from '../../../src/common/interfaces/IBringService';\r\nimport { IBringServiceOptions } from '../../../src/common/interfaces/IBringServiceOptions';\r\n\r\nconst baseUrl = \"http://api.openweathermap.org/data/2.5/\";\r\n\r\ninterface ICacheItem {\r\n    url: string;\r\n    timestamp: number;\r\n    result: any;\r\n}\r\n\r\n// Service to access the WUnderground API\r\nexport class BringService implements IBringService {\r\n    private options: IBringServiceOptions;\r\n    private context: IReactronServiceContext\r\n    private cache: { [url: string]: ICacheItem } = {};\r\n\r\n    public async start(context: IReactronServiceContext): Promise<void> {\r\n        this.context = context;\r\n        console.log('BringService.start()');\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        console.log('BringService.stop()');\r\n    }\r\n\r\n    public async setOptions(options: IBringServiceOptions): Promise<void> {\r\n        console.log('BringService.setOptions()');\r\n        this.options = options;\r\n    }\r\n\r\n    public getOptions(): Readonly<IBringServiceOptions> {\r\n        return this.options;\r\n    }\r\n\r\n    public async getLists(): Promise<any> {\r\n        const response = await request.get('', { json: true, resolveWithFullResponse: true }) as request.FullResponse;\r\n        return response;\r\n    }\r\n\r\n    // private getApiUrl(endpoint: string, location: ILocationRequest): string {\r\n    //     let url = baseUrl + endpoint\r\n    //         + '?APPID=' + this.options.apiKey\r\n    //         + '&units=' + this.options.units\r\n    //         + '&lang=' + this.context.settings.lang;\r\n\r\n    //     if (location) {\r\n    //         if (location.cityName) {\r\n    //             url += '&q=' + location.cityName;\r\n    //         }\r\n    //         if (location.zip) {\r\n    //             url += '&zip=' + location.zip;\r\n    //         }\r\n    //         if (location.coords) {\r\n    //             url += '&lon=' + location.coords.lon + '&lat=' + location.coords.lat;\r\n    //         }\r\n    //         if (location.cityId) {\r\n    //             url += '&id=' + location.cityId;\r\n    //         }\r\n    //     }\r\n    //     return url;\r\n    // }\r\n\r\n    // private async getResponse(url: string): Promise<any> {\r\n    //     console.log('BringService.get(' + url + ')');\r\n    //     const now = Date.now();\r\n    //     const validCacheTime = now - (this.options.cacheDuration * 60 * 1000);\r\n\r\n    //     // check timestamp\r\n    //     if (this.cache[url] && this.cache[url].timestamp < validCacheTime) {\r\n    //         delete (this.cache[url]);\r\n    //     }\r\n\r\n    //     if (!this.cache[url]) {\r\n    //         const response = await request.get(url, { json: true, resolveWithFullResponse: true }) as request.FullResponse;\r\n    //         if (response.statusCode !== 200) {\r\n    //             throw new Error(response.statusMessage);\r\n    //         }\r\n    //         this.cache[url] = {\r\n    //             timestamp: now,\r\n    //             result: response.body,\r\n    //             url\r\n    //         };\r\n    //     }\r\n\r\n    //     return this.cache[url].result;\r\n    // }\r\n}","import { IReactronServiceDefinition } from '@schirkan/reactron-interfaces';\r\nimport { BringService } from './services/BringService';\r\n\r\n// export interfaces\r\nexport * from '../common/interfaces/IBringService';\r\nexport * from '../common/interfaces/IBringServiceOptions';\r\n\r\n// export reactron service definition\r\nexport const services: IReactronServiceDefinition[] = [{\r\n    description: 'Service for getbring.com',\r\n    displayName: 'Shopping List',\r\n    fields: [{\r\n        displayName: 'Username',\r\n        description: 'Username',\r\n        name: 'username',\r\n        valueType: 'string',\r\n    },{\r\n        displayName: 'Password',\r\n        description: 'Password',\r\n        name: 'password',\r\n        valueType: 'string',\r\n    }],\r\n    name: 'BringService',\r\n    service: BringService\r\n}];"],"names":["request.get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AACA;IAAA;QAGY,UAAK,GAAkC,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwErD;IAtEgB,4BAAK,GAAlB,UAAmB,OAAgC;uCAAG,OAAO;;gBACzD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;;;;KACvC;IAEY,2BAAI,GAAjB;uCAAqB,OAAO;;gBACxB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;;;;KACtC;IAEY,iCAAU,GAAvB,UAAwB,OAA6B;uCAAG,OAAO;;gBAC3D,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;;;KAC1B;IAEM,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAEY,+BAAQ,GAArB;uCAAyB,OAAO;;;;4BACX,qBAAMA,WAAW,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,EAAA;;wBAA/E,QAAQ,GAAG,SAA4F;wBAC7G,sBAAO,QAAQ,EAAC;;;;KACnB;IAiDL,mBAAC;CAAA,IAAA;;AClFD;AACA,IAAa,QAAQ,GAAiC,CAAC;QACnD,WAAW,EAAE,0BAA0B;QACvC,WAAW,EAAE,eAAe;QAC5B,MAAM,EAAE,CAAC;gBACL,WAAW,EAAE,UAAU;gBACvB,WAAW,EAAE,UAAU;gBACvB,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,QAAQ;aACtB,EAAC;gBACE,WAAW,EAAE,UAAU;gBACvB,WAAW,EAAE,UAAU;gBACvB,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,QAAQ;aACtB,CAAC;QACF,IAAI,EAAE,cAAc;QACpB,OAAO,EAAE,YAAY;KACxB,CAAC;;;;"}